{"version":3,"file":"appwrite-angular.js","sources":["../../../../../libs/appwrite/angular/src/lib/exceptions/appwrite.exception.ts","../../../../../libs/appwrite/angular/src/lib/tokens/appwrite-options.token.ts","../../../../../libs/appwrite/angular/src/lib/tokens/appwrite-local-storage-provider.token.ts","../../../../../libs/appwrite/angular/src/lib/tokens/appwrite-location-provider.token.ts","../../../../../libs/appwrite/angular/src/lib/util/flatten.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-account.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-avatar.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-documents.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-functions.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-locale.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-storage.service.ts","../../../../../libs/appwrite/angular/src/lib/services/appwrite-teams.service.ts","../../../../../libs/appwrite/angular/src/lib/appwrite-angular.module.ts","../../../../../libs/appwrite/angular/src/appwrite-angular.ts"],"sourcesContent":["export class AppwriteException extends Error {\r\n  code: number;\r\n  response: string;\r\n\r\n  constructor(message: string, code: number = 0, response: string = '') {\r\n    super(message);\r\n    this.name = 'AppwriteException';\r\n    this.message = message;\r\n    this.code = code;\r\n    this.response = response;\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const APPWRITE_OPTIONS_TOKEN = new InjectionToken('APPWRITE_OPTIONS_TOKEN');\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const APPWRITE_LOCAL_STORAGE_PROVIDER_TOKEN = new InjectionToken('APPWRITE_LOCAL_STORAGE_PROVIDER_TOKEN');\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const APPWRITE_LOCATION_PROVIDER_TOKEN = new InjectionToken('APPWRITE_LOCATION_PROVIDER_TOKEN');\r\n","import { Payload } from '../types';\r\n\r\nexport function flatten(data: Payload, prefix = ''): Payload {\r\n  let output: Payload = {};\r\n\r\n  for (const key in data) {\r\n    const value = data[key];\r\n    const finalKey = prefix ? `${prefix}[${key}]` : key;\r\n\r\n    if (Array.isArray(value)) {\r\n      output = Object.assign(output, flatten(value, finalKey));\r\n    } else {\r\n      output[finalKey] = value;\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import { HttpBackend, HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport URLParse from 'url-parse';\r\nimport { APPWRITE_LOCAL_STORAGE_PROVIDER_TOKEN, AppwriteOptions } from '../appwrite-angular.module';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { APPWRITE_LOCATION_PROVIDER_TOKEN, APPWRITE_OPTIONS_TOKEN } from '../tokens';\r\nimport { Headers, HttpMethods, Payload } from '../types';\r\nimport { flatten } from '../util';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AppwriteService {\r\n  config = {\r\n    endpoint: 'https://appwrite.io/v1',\r\n    project: '',\r\n    jwt: '',\r\n    locale: '',\r\n  };\r\n  headers: Headers = {\r\n    'x-sdk-version': 'appwrite:web:3.2.0',\r\n    'X-Appwrite-Response-Format': '0.9.0',\r\n  };\r\n  private http: HttpClient;\r\n\r\n  constructor(\r\n    @Inject(APPWRITE_OPTIONS_TOKEN) config: AppwriteOptions['config'],\r\n    @Inject(APPWRITE_LOCAL_STORAGE_PROVIDER_TOKEN) public localStorageProvider,\r\n    @Inject(APPWRITE_LOCATION_PROVIDER_TOKEN) public locationProvider,\r\n    httpBackend: HttpBackend\r\n  ) {\r\n    this.http = new HttpClient(httpBackend);\r\n\r\n    if (!config || !config.endpointUrl || !config.endpointUrl) {\r\n      throw new Error('You are missing required config properties');\r\n    }\r\n    this.config.endpoint = config.endpointUrl;\r\n    this.config.project = config.projectId;\r\n    this.setEndpoint(config.endpointUrl).setProject(config.projectId);\r\n  }\r\n\r\n  setEndpoint(endpoint: string): this {\r\n    this.config.endpoint = endpoint;\r\n    return this;\r\n  }\r\n\r\n  setProject(value: string): this {\r\n    this.headers['X-Appwrite-Project'] = value;\r\n    this.config.project = value;\r\n    return this;\r\n  }\r\n\r\n  setJWT(value: string): this {\r\n    this.headers['X-Appwrite-JWT'] = value;\r\n    this.config.jwt = value;\r\n    return this;\r\n  }\r\n\r\n  setLocale(value: string): this {\r\n    this.headers['X-Appwrite-Locale'] = value;\r\n    this.config.locale = value;\r\n    return this;\r\n  }\r\n\r\n  public async call<T>(method: HttpMethods, path: string, headers: Headers = {}, params: Payload = {}): Promise<T> {\r\n    const url = new URLParse(this.config.endpoint + path);\r\n    method = method.toUpperCase() as HttpMethods;\r\n    headers = {\r\n      ...headers,\r\n      ...this.headers\r\n    };\r\n    const options: RequestInit = {\r\n      method,\r\n      headers,\r\n      credentials: 'include'\r\n    };\r\n    if (typeof this.localStorageProvider !== 'undefined' && this.localStorageProvider) {\r\n      headers['X-Fallback-Cookies'] = this.localStorageProvider.getItem('cookieFallback') ?? '';\r\n    }\r\n\r\n    if (method === 'GET') {\r\n      url.set('query', flatten(params));\r\n    } else {\r\n      switch (headers['content-type']) {\r\n        case 'application/json':\r\n          options.body = JSON.stringify(params);\r\n          break;\r\n\r\n        case 'multipart/form-data':\r\n          const formData = new FormData();\r\n\r\n          for (const key in params) {\r\n            if (Array.isArray(params[key])) {\r\n              formData.append(key + '[]', params[key].join(','));\r\n            } else {\r\n              formData.append(key, params[key]);\r\n            }\r\n          }\r\n\r\n          options.body = formData;\r\n          delete headers['content-type'];\r\n          break;\r\n      }\r\n    }\r\n\r\n    try {\r\n\r\n      const response: HttpResponse<T> = await this.http.request<T>(method, url.toString(), {\r\n        ...options,\r\n        headers: headers,\r\n        // observe: 'response',\r\n        observe: 'response' as 'response',\r\n        // observe: 'response' as 'body',\r\n      }).toPromise();\r\n      let data: any | { message: string } = null;\r\n      if (response.headers.get('content-type')?.includes('application/json')) {\r\n        data = response.body;\r\n      } else {\r\n        data = {\r\n          message: response.body\r\n        };\r\n      }\r\n\r\n      if (400 <= response.status) { throw new AppwriteException(data?.message, response.status, data); }\r\n\r\n      const cookieFallback = response.headers.get('X-Fallback-Cookies');\r\n\r\n      if (typeof this.localStorageProvider !== 'undefined' && this.localStorageProvider && cookieFallback) {\r\n        console.warn(\r\n          'Appwrite is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');\r\n        this.localStorageProvider.setItem('cookieFallback', cookieFallback);\r\n      }\r\n\r\n      return data;\r\n    } catch (e) {\r\n      throw new AppwriteException(e.message);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JWT, LogsList, Session, SessionsList, Token, User } from '@appwrite/common';\r\nimport URLParse from 'url-parse';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { flatten } from '../util';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteAccountService<T = User> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * Get Account\r\n   *\r\n   * Get currently logged in user data as JSON object.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise<T>>}\r\n   */\r\n  async get(): Promise<T> {\r\n    const path = '/account';\r\n    const payload: Payload = {};\r\n\r\n    return this.appwriteService.call<T>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Account\r\n   *\r\n   * Use this endpoint to allow a new user to register a new account in your\r\n   * project. After the user registration completes successfully, you can use\r\n   * the [/account/verfication](/docs/client/account#accountCreateVerification)\r\n   * route to start verifying the user email address. To allow the new user to\r\n   * login to their new account, you need to create a new [account\r\n   * session](/docs/client/account#accountCreateSession).\r\n   *\r\n   * @param {string} email\r\n   * @param {string} password\r\n   * @param {string} name\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async create(email: string, password: string, name?: string): Promise<T> {\r\n    if (typeof email === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"email\"');\r\n    }\r\n\r\n    if (typeof password === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"password\"');\r\n    }\r\n\r\n    const path = '/account';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof email !== 'undefined') {\r\n      payload['email'] = email;\r\n    }\r\n\r\n    if (typeof password !== 'undefined') {\r\n      payload['password'] = password;\r\n    }\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Account\r\n   *\r\n   * Delete a currently logged in user account. Behind the scene, the user\r\n   * record is not deleted but permanently blocked from any access. This is done\r\n   * to avoid deleted accounts being overtaken by new users with the same email\r\n   * address. Any user-related resources like documents or storage files should\r\n   * be deleted separately.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async delete(): Promise<void> {\r\n    const path = '/account';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Account Email\r\n   *\r\n   * Update currently logged in user account email address. After changing user\r\n   * address, user confirmation status is being reset and a new confirmation\r\n   * mail is sent. For security measures, user password is required to complete\r\n   * this request.\r\n   * This endpoint can also be used to convert an anonymous account to a normal\r\n   * one, by passing an email address and a new password.\r\n   *\r\n   * @param {string} email\r\n   * @param {string} password\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateEmail(email: string, password: string): Promise<T> {\r\n    if (typeof email === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"email\"');\r\n    }\r\n\r\n    if (typeof password === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"password\"');\r\n    }\r\n\r\n    const path = '/account/email';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof email !== 'undefined') {\r\n      payload['email'] = email;\r\n    }\r\n\r\n    if (typeof password !== 'undefined') {\r\n      payload['password'] = password;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Account JWT\r\n   *\r\n   * Use this endpoint to create a JSON Web Token. You can use the resulting JWT\r\n   * to authenticate on behalf of the current user when working with the\r\n   * Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes\r\n   * from its creation and will be invalid if the user will logout in that time\r\n   * frame.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createJWT(): Promise<JWT> {\r\n    const path = '/account/jwt';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<JWT>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Account Logs\r\n   *\r\n   * Get currently logged in user list of latest security activity logs. Each\r\n   * log returns user IP address, location and date and time of log.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getLogs(): Promise<LogsList> {\r\n    const path = '/account/logs';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<LogsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Account Name\r\n   *\r\n   * Update currently logged in user account name.\r\n   *\r\n   * @param {string} name\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateName(name: string): Promise<User> {\r\n    if (typeof name === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"name\"');\r\n    }\r\n\r\n    const path = '/account/name';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    return await this.appwriteService.call<User>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Account Password\r\n   *\r\n   * Update currently logged in user password. For validation, user is required\r\n   * to pass in the new password, and the old password. For users created with\r\n   * OAuth and Team Invites, oldPassword is optional.\r\n   *\r\n   * @param {string} password\r\n   * @param {string} oldPassword\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updatePassword(password: string, oldPassword?: string): Promise<T> {\r\n    if (typeof password === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"password\"');\r\n    }\r\n\r\n    const path = '/account/password';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof password !== 'undefined') {\r\n      payload['password'] = password;\r\n    }\r\n\r\n    if (typeof oldPassword !== 'undefined') {\r\n      payload['oldPassword'] = oldPassword;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Account Preferences\r\n   *\r\n   * Get currently logged in user preferences as a key-value object.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getPrefs(): Promise<Record<string, any>> {\r\n    const path = '/account/prefs';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<Record<string, any>>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Account Preferences\r\n   *\r\n   * Update currently logged in user account preferences. You can pass only the\r\n   * specific settings you wish to update.\r\n   *\r\n   * @param {object} prefs\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updatePrefs(prefs: Record<string, any>): Promise<T> {\r\n    if (typeof prefs === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"prefs\"');\r\n    }\r\n\r\n    const path = '/account/prefs';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof prefs !== 'undefined') {\r\n      payload['prefs'] = prefs;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Password Recovery\r\n   *\r\n   * Sends the user an email with a temporary secret key for password reset.\r\n   * When the user clicks the confirmation link he is redirected back to your\r\n   * app password reset URL with the secret key and email address values\r\n   * attached to the URL query string. Use the query string params to submit a\r\n   * request to the [PUT\r\n   * /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to\r\n   * complete the process. The verification link sent to the user's email\r\n   * address is valid for 1 hour.\r\n   *\r\n   * @param {string} email\r\n   * @param {string} url\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createRecovery(email: string, url: string): Promise<Token> {\r\n    if (typeof email === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"email\"');\r\n    }\r\n\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/account/recovery';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof email !== 'undefined') {\r\n      payload['email'] = email;\r\n    }\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    return await this.appwriteService.call<Token>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Complete Password Recovery\r\n   *\r\n   * Use this endpoint to complete the user account password reset. Both the\r\n   * **userId** and **secret** arguments will be passed as query parameters to\r\n   * the redirect URL you have provided when sending your request to the [POST\r\n   * /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.\r\n   *\r\n   * Please note that in order to avoid a [Redirect\r\n   * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\r\n   * the only valid redirect URLs are the ones from domains you have set when\r\n   * adding your platforms in the console interface.\r\n   *\r\n   * @param {string} userId\r\n   * @param {string} secret\r\n   * @param {string} password\r\n   * @param {string} passwordAgain\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateRecovery(userId: string, secret: string, password: string, passwordAgain: string): Promise<Token> {\r\n    if (typeof userId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"userId\"');\r\n    }\r\n\r\n    if (typeof secret === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"secret\"');\r\n    }\r\n\r\n    if (typeof password === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"password\"');\r\n    }\r\n\r\n    if (typeof passwordAgain === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"passwordAgain\"');\r\n    }\r\n\r\n    const path = '/account/recovery';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof userId !== 'undefined') {\r\n      payload['userId'] = userId;\r\n    }\r\n\r\n    if (typeof secret !== 'undefined') {\r\n      payload['secret'] = secret;\r\n    }\r\n\r\n    if (typeof password !== 'undefined') {\r\n      payload['password'] = password;\r\n    }\r\n\r\n    if (typeof passwordAgain !== 'undefined') {\r\n      payload['passwordAgain'] = passwordAgain;\r\n    }\r\n\r\n    return await this.appwriteService.call<Token>('PUT', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Account Sessions\r\n   *\r\n   * Get currently logged in user list of active sessions across different\r\n   * devices.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getSessions(): Promise<SessionsList> {\r\n    const path = '/account/sessions';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<SessionsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Account Session\r\n   *\r\n   * Allow the user to login into their account by providing a valid email and\r\n   * password combination. This route will create a new session for the user.\r\n   *\r\n   * @param {string} email\r\n   * @param {string} password\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createSession(email: string, password: string): Promise<Session> {\r\n    if (typeof email === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"email\"');\r\n    }\r\n\r\n    if (typeof password === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"password\"');\r\n    }\r\n\r\n    const path = '/account/sessions';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof email !== 'undefined') {\r\n      payload['email'] = email;\r\n    }\r\n\r\n    if (typeof password !== 'undefined') {\r\n      payload['password'] = password;\r\n    }\r\n\r\n    return await this.appwriteService.call<Session>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete All Account Sessions\r\n   *\r\n   * Delete all sessions from the user account and remove any sessions cookies\r\n   * from the end client.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async deleteSessions(): Promise<void> {\r\n    const path = '/account/sessions';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Anonymous Session\r\n   *\r\n   * Use this endpoint to allow a new user to register an anonymous account in\r\n   * your project. This route will also create a new session for the user. To\r\n   * allow the new user to convert an anonymous account to a normal account, you\r\n   * need to update its [email and\r\n   * password](/docs/client/account#accountUpdateEmail) or create an [OAuth2\r\n   * session](/docs/client/account#accountCreateOAuth2Session).\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createAnonymousSession(): Promise<Session> {\r\n    const path = '/account/sessions/anonymous';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<Session>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Account Session with OAuth2\r\n   *\r\n   * Allow the user to login to their account using the OAuth2 provider of their\r\n   * choice. Each OAuth2 provider should be enabled from the Appwrite console\r\n   * first. Use the success and failure arguments to provide a redirect URL's\r\n   * back to your app when login is completed.\r\n   *\r\n   * @param {string} provider\r\n   * @param {string} success\r\n   * @param {string} failure\r\n   * @param {string[]} scopes\r\n   * @throws {AppwriteException}\r\n   * @returns {void|URLParse}\r\n   */\r\n  async createOAuth2Session(provider: string, success?: string, failure?: string, scopes?: string[]): Promise<void | URLParse> {\r\n    if (typeof provider === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"provider\"');\r\n    }\r\n\r\n    const path = '/account/sessions/oauth2/{provider}'.replace('{provider}', provider);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof success !== 'undefined') {\r\n      payload['success'] = success;\r\n    }\r\n\r\n    if (typeof failure !== 'undefined') {\r\n      payload['failure'] = failure;\r\n    }\r\n\r\n    if (typeof scopes !== 'undefined') {\r\n      payload['scopes'] = scopes;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    // @todo fix this in nativescript\r\n    if (typeof this.appwriteService.locationProvider !== 'undefined' && this.appwriteService.locationProvider) {\r\n      this.appwriteService.locationProvider.href = uri.toString();\r\n    } else {\r\n      return uri;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Session By ID\r\n   *\r\n   * Use this endpoint to get a logged in user's session using a Session ID.\r\n   * Inputting 'current' will return the current session being used.\r\n   *\r\n   * @param {string} sessionId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getSession(sessionId: string): Promise<Session> {\r\n    if (typeof sessionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"sessionId\"');\r\n    }\r\n\r\n    const path = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<Session>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Account Session\r\n   *\r\n   * Use this endpoint to log out the currently logged in user from all their\r\n   * account sessions across all of their different devices. When using the\r\n   * option id argument, only the session unique ID provider will be deleted.\r\n   *\r\n   * @param {string} sessionId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async deleteSession(sessionId: string): Promise<void> {\r\n    if (typeof sessionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"sessionId\"');\r\n    }\r\n\r\n    const path = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Email Verification\r\n   *\r\n   * Use this endpoint to send a verification message to your user email address\r\n   * to confirm they are the valid owners of that address. Both the **userId**\r\n   * and **secret** arguments will be passed as query parameters to the URL you\r\n   * have provided to be attached to the verification email. The provided URL\r\n   * should redirect the user back to your app and allow you to complete the\r\n   * verification process by verifying both the **userId** and **secret**\r\n   * parameters. Learn more about how to [complete the verification\r\n   * process](/docs/client/account#accountUpdateVerification). The verification\r\n   * link sent to the user's email address is valid for 7 days.\r\n   *\r\n   * Please note that in order to avoid a [Redirect\r\n   * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\r\n   * the only valid redirect URLs are the ones from domains you have set when\r\n   * adding your platforms in the console interface.\r\n   *\r\n   *\r\n   * @param {string} url\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createVerification(url: string): Promise<Token> {\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/account/verification';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    return await this.appwriteService.call<Token>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Complete Email Verification\r\n   *\r\n   * Use this endpoint to complete the user email verification process. Use both\r\n   * the **userId** and **secret** parameters that were attached to your app URL\r\n   * to verify the user email ownership. If confirmed this route will return a\r\n   * 200 status code.\r\n   *\r\n   * @param {string} userId\r\n   * @param {string} secret\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateVerification(userId: string, secret: string): Promise<Token> {\r\n    if (typeof userId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"userId\"');\r\n    }\r\n\r\n    if (typeof secret === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"secret\"');\r\n    }\r\n\r\n    const path = '/account/verification';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof userId !== 'undefined') {\r\n      payload['userId'] = userId;\r\n    }\r\n\r\n    if (typeof secret !== 'undefined') {\r\n      payload['secret'] = secret;\r\n    }\r\n\r\n    return await this.appwriteService.call<Token>('PUT', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport URLParse from 'url-parse';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { flatten } from '../util';\r\nimport { AppwriteService } from './';\r\n\r\n@Injectable()\r\nexport class AppwriteAvatarService {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * Get Browser Icon\r\n   *\r\n   * You can use this endpoint to show different browser icons to your users.\r\n   * The code argument receives the browser code as it appears in your user\r\n   * /account/sessions endpoint. Use width, height and quality arguments to\r\n   * change the output settings.\r\n   *\r\n   * @param {string} code\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {number} quality\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getBrowser(code: string, width?: number, height?: number, quality?: number): URLParse {\r\n    if (typeof code === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"code\"');\r\n    }\r\n\r\n    const path = '/avatars/browsers/{code}'.replace('{code}', code);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Credit Card Icon\r\n   *\r\n   * The credit card endpoint will return you the icon of the credit card\r\n   * provider you need. Use width, height and quality arguments to change the\r\n   * output settings.\r\n   *\r\n   * @param {string} code\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {number} quality\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getCreditCard(code: string, width?: number, height?: number, quality?: number): URLParse {\r\n    if (typeof code === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"code\"');\r\n    }\r\n\r\n    const path = '/avatars/credit-cards/{code}'.replace('{code}', code);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Favicon\r\n   *\r\n   * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\r\n   * website URL.\r\n   *\r\n   *\r\n   * @param {string} url\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFavicon(url: string): URLParse {\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/avatars/favicon';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Country Flag\r\n   *\r\n   * You can use this endpoint to show different country flags icons to your\r\n   * users. The code argument receives the 2 letter country code. Use width,\r\n   * height and quality arguments to change the output settings.\r\n   *\r\n   * @param {string} code\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {number} quality\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFlag(code: string, width?: number, height?: number, quality?: number): URLParse {\r\n    if (typeof code === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"code\"');\r\n    }\r\n\r\n    const path = '/avatars/flags/{code}'.replace('{code}', code);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Image from URL\r\n   *\r\n   * Use this endpoint to fetch a remote image URL and crop it to any image size\r\n   * you want. This endpoint is very useful if you need to crop and display\r\n   * remote images in your app or in case you want to make sure a 3rd party\r\n   * image is properly served using a TLS protocol.\r\n   *\r\n   * @param {string} url\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getImage(url: string, width?: number, height?: number): URLParse {\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/avatars/image';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get User Initials\r\n   *\r\n   * Use this endpoint to show your user initials avatar icon on your website or\r\n   * app. By default, this route will try to print your logged-in user name or\r\n   * email initials. You can also overwrite the user name if you pass the 'name'\r\n   * parameter. If no name is given and no user is logged, an empty avatar will\r\n   * be returned.\r\n   *\r\n   * You can use the color and background params to change the avatar colors. By\r\n   * default, a random theme will be selected. The random theme will persist for\r\n   * the user's initials when reloading the same theme will always return for\r\n   * the same initials.\r\n   *\r\n   * @param {string} name\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string} color\r\n   * @param {string} background\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getInitials(name?: string, width?: number, height?: number, color?: string, background?: string): URLParse {\r\n    const path = '/avatars/initials';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof color !== 'undefined') {\r\n      payload['color'] = color;\r\n    }\r\n\r\n    if (typeof background !== 'undefined') {\r\n      payload['background'] = background;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get QR Code\r\n   *\r\n   * Converts a given plain text to a QR code image. You can use the query\r\n   * parameters to change the size and style of the resulting image.\r\n   *\r\n   * @param {string} text\r\n   * @param {number} size\r\n   * @param {number} margin\r\n   * @param {boolean} download\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getQR(text: string, size?: number, margin?: number, download?: boolean): URLParse {\r\n    if (typeof text === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"text\"');\r\n    }\r\n\r\n    const path = '/avatars/qr';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof text !== 'undefined') {\r\n      payload['text'] = text;\r\n    }\r\n\r\n    if (typeof size !== 'undefined') {\r\n      payload['size'] = size;\r\n    }\r\n\r\n    if (typeof margin !== 'undefined') {\r\n      payload['margin'] = margin;\r\n    }\r\n\r\n    if (typeof download !== 'undefined') {\r\n      payload['download'] = download;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Document, DocumentBase, DocumentsList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './appwrite.service';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteDocumentsService<T = Document<any>> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Documents\r\n   *\r\n   * Get a list of all the user documents. You can use the query params to\r\n   * filter your results. On admin mode, this endpoint will return a list of all\r\n   * of the project's documents. [Learn more about different API\r\n   * modes](/docs/admin).\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string[]} filters\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderField\r\n   * @param {string} orderType\r\n   * @param {string} orderCast\r\n   * @param {string} search\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async listDocuments<R>(\r\n    collectionId: string,\r\n    filters?: string[],\r\n    limit?: number,\r\n    offset?: number,\r\n    orderField?: keyof (R & DocumentBase) | string,\r\n    orderType?: 'ASC' | 'DESC',\r\n    orderCast?: 'int' | 'string' | 'date' | 'time' | 'datetime',\r\n    search?: string\r\n  ): Promise<DocumentsList<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents'.replace('{collectionId}', collectionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof filters !== 'undefined') {\r\n      payload['filters'] = filters;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderField !== 'undefined') {\r\n      payload['orderField'] = orderField;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    if (typeof orderCast !== 'undefined') {\r\n      payload['orderCast'] = orderCast;\r\n    }\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    return this.appwriteService.call<DocumentsList<R>>(\r\n      'GET',\r\n      path,\r\n      { 'content-type': 'application/json', },\r\n      payload\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create Document\r\n   *\r\n   * Create a new Document. Before using this route, you should create a new\r\n   * collection resource using either a [server\r\n   * integration](/docs/server/database#databaseCreateCollection) API or\r\n   * directly from your database console.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {object} data\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @param {string} parentDocument\r\n   * @param {string} parentProperty\r\n   * @param {string} parentPropertyType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createDocument<R>(collectionId: string, data: R, read?: string[], write?: string[], parentDocument?: string, parentProperty?: string, parentPropertyType?: string): Promise<Document<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof data === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"data\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents'.replace('{collectionId}', collectionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof data !== 'undefined') {\r\n      payload['data'] = data;\r\n    }\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n\r\n    if (typeof parentDocument !== 'undefined') {\r\n      payload['parentDocument'] = parentDocument;\r\n    }\r\n\r\n    if (typeof parentProperty !== 'undefined') {\r\n      payload['parentProperty'] = parentProperty;\r\n    }\r\n\r\n    if (typeof parentPropertyType !== 'undefined') {\r\n      payload['parentPropertyType'] = parentPropertyType;\r\n    }\r\n\r\n    return this.appwriteService.call<Document<R>>('POST', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Document\r\n   *\r\n   * Get a document by its unique ID. This endpoint response returns a JSON\r\n   * object with the document data.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string} documentId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getDocument<R>(collectionId: string, documentId: string): Promise<Document<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof documentId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"documentId\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId)\r\n      .replace('{documentId}', documentId);\r\n    const payload: Payload = {};\r\n\r\n    return this.appwriteService.call<Document<R>>('GET', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Document\r\n   *\r\n   * Update a document by its unique ID. Using the patch method you can pass\r\n   * only specific fields that will get updated.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string} documentId\r\n   * @param {object} data\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateDocument<R>(collectionId: string, documentId: string, data: any, read?: string[], write?: string[]): Promise<Document<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof documentId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"documentId\"');\r\n    }\r\n\r\n    if (typeof data === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"data\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId)\r\n      .replace('{documentId}', documentId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof data !== 'undefined') {\r\n      payload['data'] = data;\r\n    }\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n    return this.appwriteService.call<Document<R>>('PATCH', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Document\r\n   *\r\n   * Delete a document by its unique ID. This endpoint deletes only the parent\r\n   * documents, its attributes and relations to other documents. Child documents\r\n   * **will not** be deleted.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string} documentId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async deleteDocument(collectionId: string, documentId: string): Promise<void> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof documentId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"documentId\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId)\r\n      .replace('{documentId}', documentId);\r\n    const payload: Payload = {};\r\n\r\n    return this.appwriteService.call<void>('DELETE', path, { 'content-type': 'application/json', }, payload);\r\n\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Execution, ExecutionsList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './';\r\n\r\n@Injectable()\r\nexport class AppwriteFunctionsService<T = Execution> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Executions\r\n   *\r\n   * Get a list of all the current user function execution logs. You can use the\r\n   * query params to filter your results. On admin mode, this endpoint will\r\n   * return a list of all of the project's executions. [Learn more about\r\n   * different API modes](/docs/admin).\r\n   *\r\n   * @param {string} functionId\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async listExecutions(functionId: string, search?: string, limit?: number, offset?: number, orderType?: string): Promise<ExecutionsList> {\r\n    if (typeof functionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"functionId\"');\r\n    }\r\n\r\n    const path = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<ExecutionsList>('GET', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Execution\r\n   *\r\n   * Trigger a function execution. The returned object will return you the\r\n   * current execution status. You can ping the `Get Execution` endpoint to get\r\n   * updates on the current execution status. Once this endpoint is called, your\r\n   * function execution process will start asynchronously.\r\n   *\r\n   * @param {string} functionId\r\n   * @param {string} data\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createExecution(functionId: string, data?: string): Promise<T> {\r\n    if (typeof functionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"functionId\"');\r\n    }\r\n\r\n    const path = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof data !== 'undefined') {\r\n      payload['data'] = data;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Execution\r\n   *\r\n   * Get a function execution log by its unique ID.\r\n   *\r\n   * @param {string} functionId\r\n   * @param {string} executionId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getExecution(functionId: string, executionId: string): Promise<T> {\r\n    if (typeof functionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"functionId\"');\r\n    }\r\n\r\n    if (typeof executionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"executionId\"');\r\n    }\r\n\r\n    const path = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId)\r\n      .replace('{executionId}', executionId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<T>('GET', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ContinentsList, Countries, CountriesList, CurrenciesList, LanguagesList, Locale, PhonesList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteLocaleService {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * Get User Locale\r\n   *\r\n   * Get the current user location based on IP. Returns an object with user\r\n   * country code, country name, continent name, continent code, ip address and\r\n   * suggested currency. You can use the locale header to get the data in a\r\n   * supported language.\r\n   *\r\n   * ([IP Geolocation by DB-IP](https://db-ip.com))\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async get(): Promise<Locale> {\r\n    const path = '/locale';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<Locale>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * List Continents\r\n   *\r\n   * List of all continents. You can use the locale header to get the data in a\r\n   * supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getContinents(): Promise<ContinentsList> {\r\n    const path = '/locale/continents';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<ContinentsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * List Countries\r\n   *\r\n   * List of all countries. You can use the locale header to get the data in a\r\n   * supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCountries(): Promise<CountriesList> {\r\n    const path = '/locale/countries';\r\n    const payload: Payload = {};\r\n\r\n\r\n    return await this.appwriteService.call<CountriesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List EU Countries\r\n   *\r\n   * List of all countries that are currently members of the EU. You can use the\r\n   * locale header to get the data in a supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCountriesEU(): Promise<CountriesList> {\r\n    const path = '/locale/countries/eu';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<CountriesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List Countries Phone Codes\r\n   *\r\n   * List of all countries phone codes. You can use the locale header to get the\r\n   * data in a supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCountriesPhones(): Promise<PhonesList> {\r\n    const path = '/locale/countries/phones';\r\n    const payload: Payload = {};\r\n\r\n\r\n    return await this.appwriteService.call<PhonesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List Currencies\r\n   *\r\n   * List of all currencies, including currency symbol, name, plural, and\r\n   * decimal digits for all major and minor currencies. You can use the locale\r\n   * header to get the data in a supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCurrencies(): Promise<CurrenciesList> {\r\n    const path = '/locale/currencies';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<CurrenciesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List Languages\r\n   *\r\n   * List of all languages classified by ISO 639-1 including 2-letter code, name\r\n   * in English, and name in the respective language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getLanguages(): Promise<LanguagesList> {\r\n    const path = '/locale/languages';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<LanguagesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { File as AppwriteFile, FilesList } from '@appwrite/common';\r\nimport URLParse from 'url-parse';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { flatten } from '../util';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteStorageService<T = AppwriteFile> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Files\r\n   *\r\n   * Get a list of all the user files. You can use the query params to filter\r\n   * your results. On admin mode, this endpoint will return a list of all of the\r\n   * project's files. [Learn more about different API modes](/docs/admin).\r\n   *\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async listFiles(search?: string, limit?: number, offset?: number, orderType?: string): Promise<FilesList> {\r\n    const path = '/storage/files';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<FilesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create File\r\n   *\r\n   * Create a new file. The user who creates the file will automatically be\r\n   * assigned to read and write access unless he has passed custom values for\r\n   * read and write arguments.\r\n   *\r\n   * @param {File} file\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createFile(file: File, read?: string[], write?: string[]): Promise<T> {\r\n    if (typeof file === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"file\"');\r\n    }\r\n\r\n    const path = '/storage/files';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof file !== 'undefined') {\r\n      payload['file'] = file;\r\n    }\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, {\r\n      'content-type': 'multipart/form-data',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get File\r\n   *\r\n   * Get a file by its unique ID. This endpoint response returns a JSON object\r\n   * with the file metadata.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getFile(fileId: string): Promise<T> {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<T>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update File\r\n   *\r\n   * Update a file by its unique ID. Only users with write permissions have\r\n   * access to update this resource.\r\n   *\r\n   * @param {string} fileId\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n\r\n\r\n  async updateFile(fileId: string, read: string[], write: string[]): Promise<T> {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    if (typeof read === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"read\"');\r\n    }\r\n\r\n    if (typeof write === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"write\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n\r\n\r\n    return await this.appwriteService.call<T>('PUT', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete File\r\n   *\r\n   * Delete a file by its unique ID. Only users with write permissions have\r\n   * access to delete this resource.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n\r\n  async deleteFile(fileId: string): Promise<void> {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get File for Download\r\n   *\r\n   * Get a file content by its unique ID. The endpoint response return with a\r\n   * 'Content-Disposition: attachment' header that tells the browser to start\r\n   * downloading the file to user downloads directory.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFileDownload(fileId: string): URLParse {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}/download'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get File Preview\r\n   *\r\n   * Get a file preview image. Currently, this method supports preview for image\r\n   * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\r\n   * and spreadsheets, will return the file icon image. You can also pass query\r\n   * string arguments for cutting and resizing your preview image.\r\n   *\r\n   * @param {string} fileId\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string} gravity\r\n   * @param {number} quality\r\n   * @param {number} borderWidth\r\n   * @param {string} borderColor\r\n   * @param {number} borderRadius\r\n   * @param {number} opacity\r\n   * @param {number} rotation\r\n   * @param {string} background\r\n   * @param {string} output\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFilePreview(\r\n    fileId: string,\r\n    width?: number,\r\n    height?: number,\r\n    gravity?: 'center' | 'top-left' | 'top' | 'top-right' | 'left' | 'right' | 'bottom-left' | 'bottom' | 'bottom-right',\r\n    quality?: number,\r\n    borderWidth?: number,\r\n    borderColor?: string,\r\n    borderRadius?: number,\r\n    opacity?: number,\r\n    rotation?: number,\r\n    background?: string,\r\n    output?: 'jpeg' | 'jpg' | 'png' | 'gif' | 'webp'\r\n  ): URLParse {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}/preview'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof gravity !== 'undefined') {\r\n      payload['gravity'] = gravity;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    if (typeof borderWidth !== 'undefined') {\r\n      payload['borderWidth'] = borderWidth;\r\n    }\r\n\r\n    if (typeof borderColor !== 'undefined') {\r\n      payload['borderColor'] = borderColor;\r\n    }\r\n\r\n    if (typeof borderRadius !== 'undefined') {\r\n      payload['borderRadius'] = borderRadius;\r\n    }\r\n\r\n    if (typeof opacity !== 'undefined') {\r\n      payload['opacity'] = opacity;\r\n    }\r\n\r\n    if (typeof rotation !== 'undefined') {\r\n      payload['rotation'] = rotation;\r\n    }\r\n\r\n    if (typeof background !== 'undefined') {\r\n      payload['background'] = background;\r\n    }\r\n\r\n    if (typeof output !== 'undefined') {\r\n      payload['output'] = output;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get File for View\r\n   *\r\n   * Get a file content by its unique ID. This endpoint is similar to the\r\n   * download method but returns with no  'Content-Disposition: attachment'\r\n   * header.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFileView(fileId: string): URLParse {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}/view'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Membership, MembershipsList, Team, TeamsList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteTeamsService<T = Team> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Teams\r\n   *\r\n   * Get a list of all the current user teams. You can use the query params to\r\n   * filter your results. On admin mode, this endpoint will return a list of all\r\n   * of the project's teams. [Learn more about different API\r\n   * modes](/docs/admin).\r\n   *\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async list(search?: string, limit?: number, offset?: number, orderType?: string): Promise<TeamsList> {\r\n    const path = '/teams';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<TeamsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Team\r\n   *\r\n   * Create a new team. The user who creates the team will automatically be\r\n   * assigned as the owner of the team. The team owner can invite new members,\r\n   * who will be able add new owners and update or delete the team from your\r\n   * project.\r\n   *\r\n   * @param {string} name\r\n   * @param {string[]} roles\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async create(name: string, roles?: string[]): Promise<T> {\r\n    if (typeof name === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"name\"');\r\n    }\r\n\r\n    const path = '/teams';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    if (typeof roles !== 'undefined') {\r\n      payload['roles'] = roles;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Team\r\n   *\r\n   * Get a team by its unique ID. All team members have read access for this\r\n   * resource.\r\n   *\r\n   * @param {string} teamId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async get(teamId: string): Promise<T> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<T>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Team\r\n   *\r\n   * Update a team by its unique ID. Only team owners have write access for this\r\n   * resource.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} name\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async update(teamId: string, name: string): Promise<T> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof name === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"name\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('PUT', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Team\r\n   *\r\n   * Delete a team by its unique ID. Only team owners have write access for this\r\n   * resource.\r\n   *\r\n   * @param {string} teamId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async delete(teamId: string): Promise<void> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Team Memberships\r\n   *\r\n   * Get a team members by the team unique ID. All team members have read access\r\n   * for this list of resources.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getMemberships(teamId: string, search?: string, limit?: number, offset?: number, orderType?: string): Promise<MembershipsList> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<MembershipsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Team Membership\r\n   *\r\n   * Use this endpoint to invite a new member to join your team. An email with a\r\n   * link to join the team will be sent to the new member email address if the\r\n   * member doesn't exist in the project it will be created automatically.\r\n   *\r\n   * Use the 'URL' parameter to redirect the user from the invitation email back\r\n   * to your app. When the user is redirected, use the [Update Team Membership\r\n   * Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow\r\n   * the user to accept the invitation to the team.\r\n   *\r\n   * Please note that in order to avoid a [Redirect\r\n   * Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\r\n   * the only valid redirect URL's are the once from domains you have set when\r\n   * added your platforms in the console interface.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} email\r\n   * @param {string[]} roles\r\n   * @param {string} url\r\n   * @param {string} name\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createMembership(teamId: string, email: string, roles: string[], url: string, name?: string): Promise<Membership> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof email === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"email\"');\r\n    }\r\n\r\n    if (typeof roles === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"roles\"');\r\n    }\r\n\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof email !== 'undefined') {\r\n      payload['email'] = email;\r\n    }\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    if (typeof roles !== 'undefined') {\r\n      payload['roles'] = roles;\r\n    }\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    return await this.appwriteService.call<Membership>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Membership Roles\r\n   *\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} membershipId\r\n   * @param {string[]} roles\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateMembershipRoles(teamId: string, membershipId: string, roles: string[]): Promise<Membership> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof membershipId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"membershipId\"');\r\n    }\r\n\r\n    if (typeof roles === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"roles\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId)\r\n      .replace('{membershipId}', membershipId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof roles !== 'undefined') {\r\n      payload['roles'] = roles;\r\n    }\r\n\r\n    return await this.appwriteService.call<Membership>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Team Membership\r\n   *\r\n   * This endpoint allows a user to leave a team or for a team owner to delete\r\n   * the membership of any other team member. You can also use this endpoint to\r\n   * delete a user membership even if it is not accepted.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} membershipId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async deleteMembership(teamId: string, membershipId: string): Promise<void> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof membershipId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"membershipId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId)\r\n      .replace('{membershipId}', membershipId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Team Membership Status\r\n   *\r\n   * Use this endpoint to allow a user to accept an invitation to join a team\r\n   * after being redirected back to your app from the invitation email recieved\r\n   * by the user.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} membershipId\r\n   * @param {string} userId\r\n   * @param {string} secret\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateMembershipStatus(teamId: string, membershipId: string, userId: string, secret: string): Promise<Membership> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof membershipId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"membershipId\"');\r\n    }\r\n\r\n    if (typeof userId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"userId\"');\r\n    }\r\n\r\n    if (typeof secret === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"secret\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId)\r\n      .replace('{membershipId}', membershipId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof userId !== 'undefined') {\r\n      payload['userId'] = userId;\r\n    }\r\n\r\n    if (typeof secret !== 'undefined') {\r\n      payload['secret'] = secret;\r\n    }\r\n\r\n    return await this.appwriteService.call<Membership>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { AppwriteAccountService, AppwriteAvatarService, AppwriteDocumentsService, AppwriteFunctionsService, AppwriteLocaleService, AppwriteService, AppwriteStorageService, AppwriteTeamsService } from './services';\nimport { APPWRITE_LOCAL_STORAGE_PROVIDER_TOKEN, APPWRITE_OPTIONS_TOKEN } from './tokens';\nimport { APPWRITE_LOCATION_PROVIDER_TOKEN } from './tokens/appwrite-location-provider.token';\n\nexport * from './exceptions';\nexport * from './services';\nexport * from './tokens';\nexport * from './types';\nexport * from './util';\n\nexport interface AppwriteOptions {\n  appwriteOptionsProvider?: Provider;\n  config?: {\n    endpointUrl: string;\n    projectId: string;\n  };\n}\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, HttpClientModule],\n  providers: [],\n  exports: [],\n})\nexport class AppwriteAngularModule {\n  static forRoot(options: AppwriteOptions): ModuleWithProviders<AppwriteAngularModule> {\n    return {\n      ngModule: AppwriteAngularModule,\n      providers: [\n        options.appwriteOptionsProvider || { provide: APPWRITE_OPTIONS_TOKEN, useValue: options.config },\n        { provide: APPWRITE_LOCAL_STORAGE_PROVIDER_TOKEN, useFactory: () => window.localStorage },\n        { provide: APPWRITE_LOCATION_PROVIDER_TOKEN, useFactory: () => window.location },\n        AppwriteService,\n        AppwriteAccountService,\n        AppwriteAvatarService,\n        AppwriteDocumentsService,\n        AppwriteFunctionsService,\n        AppwriteLocaleService,\n        AppwriteStorageService,\n        AppwriteTeamsService,\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;MAAa,iBAAkB,SAAQ,KAAK;IAI1C,YAAY,OAAe,EAAE,OAAe,CAAC,EAAE,WAAmB,EAAE;QAClE,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;;MCRU,sBAAsB,GAAG,IAAI,cAAc,CAAC,wBAAwB;;MCApE,qCAAqC,GAAG,IAAI,cAAc,CAAC,uCAAuC;;MCAlG,gCAAgC,GAAG,IAAI,cAAc,CAAC,kCAAkC;;SCArF,OAAO,CAAC,IAAa,EAAE,MAAM,GAAG,EAAE;IAChD,IAAI,MAAM,GAAY,EAAE,CAAC;IAEzB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,MAAM,QAAQ,GAAG,MAAM,GAAG,GAAG,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;QAEpD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC1D;aAAM;YACL,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;SAC1B;KACF;IAED,OAAO,MAAM,CAAC;AAChB;;MCPa,eAAe;IAa1B,YACkC,MAAiC,EACX,oBAAoB,EACzB,gBAAgB,EACjE,WAAwB;QAF8B,yBAAoB,GAApB,oBAAoB,CAAA;QACzB,qBAAgB,GAAhB,gBAAgB,CAAA;QAfnE,WAAM,GAAG;YACP,QAAQ,EAAE,wBAAwB;YAClC,OAAO,EAAE,EAAE;YACX,GAAG,EAAE,EAAE;YACP,MAAM,EAAE,EAAE;SACX,CAAC;QACF,YAAO,GAAY;YACjB,eAAe,EAAE,oBAAoB;YACrC,4BAA4B,EAAE,OAAO;SACtC,CAAC;QASA,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;QAExC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YACzD,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KACnE;IAED,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAChC,OAAO,IAAI,CAAC;KACb;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,KAAK,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;QAC5B,OAAO,IAAI,CAAC;KACb;IAED,MAAM,CAAC,KAAa;QAClB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;QACxB,OAAO,IAAI,CAAC;KACb;IAED,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;QAC3B,OAAO,IAAI,CAAC;KACb;IAEY,IAAI,CAAI,MAAmB,EAAE,IAAY,EAAE,UAAmB,EAAE,EAAE,SAAkB,EAAE;;;YACjG,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;YACtD,MAAM,GAAG,MAAM,CAAC,WAAW,EAAiB,CAAC;YAC7C,OAAO,mCACF,OAAO,GACP,IAAI,CAAC,OAAO,CAChB,CAAC;YACF,MAAM,OAAO,GAAgB;gBAC3B,MAAM;gBACN,OAAO;gBACP,WAAW,EAAE,SAAS;aACvB,CAAC;YACF,IAAI,OAAO,IAAI,CAAC,oBAAoB,KAAK,WAAW,IAAI,IAAI,CAAC,oBAAoB,EAAE;gBACjF,OAAO,CAAC,oBAAoB,CAAC,GAAG,MAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,CAAC,mCAAI,EAAE,CAAC;aAC3F;YAED,IAAI,MAAM,KAAK,KAAK,EAAE;gBACpB,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;aACnC;iBAAM;gBACL,QAAQ,OAAO,CAAC,cAAc,CAAC;oBAC7B,KAAK,kBAAkB;wBACrB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBACtC,MAAM;oBAER,KAAK,qBAAqB;wBACxB,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;wBAEhC,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;4BACxB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;gCAC9B,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;6BACpD;iCAAM;gCACL,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;6BACnC;yBACF;wBAED,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;wBACxB,OAAO,OAAO,CAAC,cAAc,CAAC,CAAC;wBAC/B,MAAM;iBACT;aACF;YAED,IAAI;gBAEF,MAAM,QAAQ,GAAoB,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAI,MAAM,EAAE,GAAG,CAAC,QAAQ,EAAE,kCAC9E,OAAO,KACV,OAAO,EAAE,OAAO;;oBAEhB,OAAO,EAAE,UAAwB,IAEjC,CAAC,SAAS,EAAE,CAAC;gBACf,IAAI,IAAI,GAA8B,IAAI,CAAC;gBAC3C,IAAI,MAAA,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,0CAAE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;oBACtE,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;iBACtB;qBAAM;oBACL,IAAI,GAAG;wBACL,OAAO,EAAE,QAAQ,CAAC,IAAI;qBACvB,CAAC;iBACH;gBAED,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE;oBAAE,MAAM,IAAI,iBAAiB,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBAAE;gBAElG,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;gBAElE,IAAI,OAAO,IAAI,CAAC,oBAAoB,KAAK,WAAW,IAAI,IAAI,CAAC,oBAAoB,IAAI,cAAc,EAAE;oBACnG,OAAO,CAAC,IAAI,CACV,+HAA+H,CAAC,CAAC;oBACnI,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;iBACrE;gBAED,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;aACxC;;KACF;;4GA7HU,eAAe,kBAchB,sBAAsB,aACtB,qCAAqC,aACrC,gCAAgC;gHAhB/B,eAAe,cADF,MAAM;2FACnB,eAAe;kBAD3B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;0BAe7B,MAAM;2BAAC,sBAAsB;;0BAC7B,MAAM;2BAAC,qCAAqC;;0BAC5C,MAAM;2BAAC,gCAAgC;;;MChB/B,sBAAsB;IAEjC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;IAWK,GAAG;;YACP,MAAM,IAAI,GAAG,UAAU,CAAC;YACxB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE;gBAC/C,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;;IAkBK,MAAM,CAAC,KAAa,EAAE,QAAgB,EAAE,IAAa;;YACzD,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,MAAM,IAAI,iBAAiB,CAAC,wCAAwC,CAAC,CAAC;aACvE;YAED,MAAM,IAAI,GAAG,UAAU,CAAC;YACxB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;aAChC;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,MAAM,EAAE,IAAI,EAAE;gBACtD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;IAcK,MAAM;;YACV,MAAM,IAAI,GAAG,UAAU,CAAC;YACxB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;IAiBK,WAAW,CAAC,KAAa,EAAE,QAAgB;;YAC/C,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,MAAM,IAAI,iBAAiB,CAAC,wCAAwC,CAAC,CAAC;aACvE;YAED,MAAM,IAAI,GAAG,gBAAgB,CAAC;YAC9B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;aAChC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,OAAO,EAAE,IAAI,EAAE;gBACvD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;IAcK,SAAS;;YACb,MAAM,IAAI,GAAG,cAAc,CAAC;YAC5B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAM,MAAM,EAAE,IAAI,EAAE;gBACxD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAWK,OAAO;;YACX,MAAM,IAAI,GAAG,eAAe,CAAC;YAC7B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAW,KAAK,EAAE,IAAI,EAAE;gBAC5D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAWK,UAAU,CAAC,IAAY;;YAC3B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,MAAM,IAAI,GAAG,eAAe,CAAC;YAC7B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,OAAO,EAAE,IAAI,EAAE;gBAC1D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;IAcK,cAAc,CAAC,QAAgB,EAAE,WAAoB;;YACzD,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,MAAM,IAAI,iBAAiB,CAAC,wCAAwC,CAAC,CAAC;aACvE;YAED,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;aAChC;YAED,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE;gBACtC,OAAO,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;aACtC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,OAAO,EAAE,IAAI,EAAE;gBACvD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;IAUK,QAAQ;;YACZ,MAAM,IAAI,GAAG,gBAAgB,CAAC;YAC9B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAsB,KAAK,EAAE,IAAI,EAAE;gBACvE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAYK,WAAW,CAAC,KAA0B;;YAC1C,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,MAAM,IAAI,GAAG,gBAAgB,CAAC;YAC9B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,OAAO,EAAE,IAAI,EAAE;gBACvD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;;;IAmBK,cAAc,CAAC,KAAa,EAAE,GAAW;;YAC7C,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,MAAM,IAAI,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;aAClE;YAED,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;aACtB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAQ,MAAM,EAAE,IAAI,EAAE;gBAC1D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;;;;;;IAsBK,cAAc,CAAC,MAAc,EAAE,MAAc,EAAE,QAAgB,EAAE,aAAqB;;YAC1F,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,MAAM,IAAI,iBAAiB,CAAC,wCAAwC,CAAC,CAAC;aACvE;YAED,IAAI,OAAO,aAAa,KAAK,WAAW,EAAE;gBACxC,MAAM,IAAI,iBAAiB,CAAC,6CAA6C,CAAC,CAAC;aAC5E;YAED,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;aAChC;YAED,IAAI,OAAO,aAAa,KAAK,WAAW,EAAE;gBACxC,OAAO,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;aAC1C;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAQ,KAAK,EAAE,IAAI,EAAE;gBACzD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAWK,WAAW;;YACf,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAe,KAAK,EAAE,IAAI,EAAE;gBAChE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;IAaK,aAAa,CAAC,KAAa,EAAE,QAAgB;;YACjD,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,MAAM,IAAI,iBAAiB,CAAC,wCAAwC,CAAC,CAAC;aACvE;YAED,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;aAChC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAU,MAAM,EAAE,IAAI,EAAE;gBAC5D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAWK,cAAc;;YAClB,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;IAeK,sBAAsB;;YAC1B,MAAM,IAAI,GAAG,6BAA6B,CAAC;YAC3C,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAU,MAAM,EAAE,IAAI,EAAE;gBAC5D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;IAiBK,mBAAmB,CAAC,QAAgB,EAAE,OAAgB,EAAE,OAAgB,EAAE,MAAiB;;YAC/F,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,MAAM,IAAI,iBAAiB,CAAC,wCAAwC,CAAC,CAAC;aACvE;YAED,MAAM,IAAI,GAAG,qCAAqC,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YACnF,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;gBAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;aAC9B;YAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;gBAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;aAC9B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;YACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;YACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;YAGnC,IAAI,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,KAAK,WAAW,IAAI,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE;gBACzG,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;aAC7D;iBAAM;gBACL,OAAO,GAAG,CAAC;aACZ;SACF;KAAA;;;;;;;;;;;IAYK,UAAU,CAAC,SAAiB;;YAChC,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,MAAM,IAAI,iBAAiB,CAAC,yCAAyC,CAAC,CAAC;aACxE;YAED,MAAM,IAAI,GAAG,+BAA+B,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YAC/E,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAU,KAAK,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;IAaK,aAAa,CAAC,SAAiB;;YACnC,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,MAAM,IAAI,iBAAiB,CAAC,yCAAyC,CAAC,CAAC;aACxE;YAED,MAAM,IAAI,GAAG,+BAA+B,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YAC/E,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;;;;;;;;;IAyBK,kBAAkB,CAAC,GAAW;;YAClC,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,MAAM,IAAI,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;aAClE;YAED,MAAM,IAAI,GAAG,uBAAuB,CAAC;YACrC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;aACtB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAQ,MAAM,EAAE,IAAI,EAAE;gBAC1D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;IAeK,kBAAkB,CAAC,MAAc,EAAE,MAAc;;YACrD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,uBAAuB,CAAC;YACrC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAQ,KAAK,EAAE,IAAI,EAAE;gBACzD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;mHAhoBU,sBAAsB;uHAAtB,sBAAsB;2FAAtB,sBAAsB;kBADlC,UAAU;;;MCDE,qBAAqB;IAEhC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;;;;;;;;IAkBD,UAAU,CAAC,IAAY,EAAE,KAAc,EAAE,MAAe,EAAE,OAAgB;QACxE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;SACnE;QAED,MAAM,IAAI,GAAG,0BAA0B,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAChE,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC9B;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;;;;IAgBD,aAAa,CAAC,IAAY,EAAE,KAAc,EAAE,MAAe,EAAE,OAAgB;QAC3E,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;SACnE;QAED,MAAM,IAAI,GAAG,8BAA8B,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACpE,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC9B;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;IAaD,UAAU,CAAC,GAAW;QACpB,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;YAC9B,MAAM,IAAI,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;SAClE;QAED,MAAM,IAAI,GAAG,kBAAkB,CAAC;QAChC,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;YAC9B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;SACtB;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;;;;IAgBD,OAAO,CAAC,IAAY,EAAE,KAAc,EAAE,MAAe,EAAE,OAAgB;QACrE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;SACnE;QAED,MAAM,IAAI,GAAG,uBAAuB,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC9B;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;;;;IAgBD,QAAQ,CAAC,GAAW,EAAE,KAAc,EAAE,MAAe;QACnD,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;YAC9B,MAAM,IAAI,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;SAClE;QAED,MAAM,IAAI,GAAG,gBAAgB,CAAC;QAC9B,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;YAC9B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;SACtB;QAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;;;;;;;;;;;;IAwBD,WAAW,CAAC,IAAa,EAAE,KAAc,EAAE,MAAe,EAAE,KAAc,EAAE,UAAmB;QAC7F,MAAM,IAAI,GAAG,mBAAmB,CAAC;QACjC,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;SACxB;QAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;YACrC,OAAO,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;SACpC;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;;;IAeD,KAAK,CAAC,IAAY,EAAE,IAAa,EAAE,MAAe,EAAE,QAAkB;QACpE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;SACnE;QAED,MAAM,IAAI,GAAG,aAAa,CAAC;QAC3B,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;SACxB;QAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;SACxB;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;SAChC;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;kHA1SU,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU;;;MCCE,wBAAwB;IAEnC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;;;;;;;;;;;;IAsBK,aAAa,CACjB,YAAoB,EACpB,OAAkB,EAClB,KAAc,EACd,MAAe,EACf,UAA8C,EAC9C,SAA0B,EAC1B,SAA2D,EAC3D,MAAe;;YAEf,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,MAAM,IAAI,GAAG,gDAAgD,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YACtG,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;gBAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;aAC9B;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,OAAO,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;aACpC;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAC9B,KAAK,EACL,IAAI,EACJ,EAAE,cAAc,EAAE,kBAAkB,GAAG,EACvC,OAAO,CACR,CAAC;SACH;KAAA;;;;;;;;;;;;;;;;;;;IAoBK,cAAc,CAAI,YAAoB,EAAE,IAAO,EAAE,IAAe,EAAE,KAAgB,EAAE,cAAuB,EAAE,cAAuB,EAAE,kBAA2B;;YACrK,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,MAAM,IAAI,GAAG,gDAAgD,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YACtG,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,cAAc,KAAK,WAAW,EAAE;gBACzC,OAAO,CAAC,gBAAgB,CAAC,GAAG,cAAc,CAAC;aAC5C;YAED,IAAI,OAAO,cAAc,KAAK,WAAW,EAAE;gBACzC,OAAO,CAAC,gBAAgB,CAAC,GAAG,cAAc,CAAC;aAC5C;YAED,IAAI,OAAO,kBAAkB,KAAK,WAAW,EAAE;gBAC7C,OAAO,CAAC,oBAAoB,CAAC,GAAG,kBAAkB,CAAC;aACpD;YAED,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAc,MAAM,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SAC/G;KAAA;;;;;;;;;;;;IAaK,WAAW,CAAI,YAAoB,EAAE,UAAkB;;YAC3D,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,MAAM,IAAI,GAAG,6DAA6D,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC;iBAC/G,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACvC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAc,KAAK,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SAC9G;KAAA;;;;;;;;;;;;;;;IAiBK,cAAc,CAAI,YAAoB,EAAE,UAAkB,EAAE,IAAS,EAAE,IAAe,EAAE,KAAgB;;YAC5G,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,MAAM,IAAI,GAAG,6DAA6D,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC;iBAC/G,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACvC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAc,OAAO,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SAChH;KAAA;;;;;;;;;;;;;IAcK,cAAc,CAAC,YAAoB,EAAE,UAAkB;;YAC3D,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,MAAM,IAAI,GAAG,6DAA6D,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC;iBAC/G,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACvC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SAE1G;KAAA;;qHA7OU,wBAAwB;yHAAxB,wBAAwB;2FAAxB,wBAAwB;kBADpC,UAAU;;;MCAE,wBAAwB;IAEnC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;;;;;;;;;IAmBK,cAAc,CAAC,UAAkB,EAAE,MAAe,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB;;YAC3G,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,MAAM,IAAI,GAAG,oCAAoC,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACtF,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAiB,KAAK,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SACvH;KAAA;;;;;;;;;;;;;;IAeK,eAAe,CAAC,UAAkB,EAAE,IAAa;;YACrD,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,MAAM,IAAI,GAAG,oCAAoC,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACtF,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,MAAM,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SAC3G;KAAA;;;;;;;;;;;IAYK,YAAY,CAAC,UAAkB,EAAE,WAAmB;;YACxD,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE;gBACtC,MAAM,IAAI,iBAAiB,CAAC,2CAA2C,CAAC,CAAC;aAC1E;YAED,MAAM,IAAI,GAAG,kDAAkD,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC;iBAChG,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YACzC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;SAC1G;KAAA;;qHAvGU,wBAAwB;yHAAxB,wBAAwB;2FAAxB,wBAAwB;kBADpC,UAAU;;;MCEE,qBAAqB;IAEhC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;;;;;;IAgBK,GAAG;;YACP,MAAM,IAAI,GAAG,SAAS,CAAC;YACvB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAS,KAAK,EAAE,IAAI,EAAE;gBAC1D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAWK,aAAa;;YACjB,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAClC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAiB,KAAK,EAAE,IAAI,EAAE;gBAClE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAWK,YAAY;;YAChB,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAG5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAgB,KAAK,EAAE,IAAI,EAAE;gBACjE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAYK,cAAc;;YAClB,MAAM,IAAI,GAAG,sBAAsB,CAAC;YACpC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAgB,KAAK,EAAE,IAAI,EAAE;gBACjE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAYK,kBAAkB;;YACtB,MAAM,IAAI,GAAG,0BAA0B,CAAC;YACxC,MAAM,OAAO,GAAY,EAAE,CAAC;YAG5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAa,KAAK,EAAE,IAAI,EAAE;gBAC9D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAaK,aAAa;;YACjB,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAClC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAiB,KAAK,EAAE,IAAI,EAAE;gBAClE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;IAYK,YAAY;;YAChB,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAgB,KAAK,EAAE,IAAI,EAAE;gBACjE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;kHA/IU,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU;;;MCGE,sBAAsB;IAEjC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;;;;;;;IAiBK,SAAS,CAAC,MAAe,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB;;YAClF,MAAM,IAAI,GAAG,gBAAgB,CAAC;YAC9B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAY,KAAK,EAAE,IAAI,EAAE;gBAC7D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;IAeK,UAAU,CAAC,IAAU,EAAE,IAAe,EAAE,KAAgB;;YAC5D,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,MAAM,IAAI,GAAG,gBAAgB,CAAC;YAC9B,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,MAAM,EAAE,IAAI,EAAE;gBACtD,cAAc,EAAE,qBAAqB;aACtC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAYK,OAAO,CAAC,MAAc;;YAC1B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,yBAAyB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACnE,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE;gBACrD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;IAgBK,UAAU,CAAC,MAAc,EAAE,IAAc,EAAE,KAAe;;YAC9D,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,MAAM,IAAI,GAAG,yBAAyB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACnE,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAGD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE;gBACrD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAaK,UAAU,CAAC,MAAc;;YAC7B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,yBAAyB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACnE,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;IAaD,eAAe,CAAC,MAAc;QAC5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;SACrE;QAED,MAAM,IAAI,GAAG,kCAAkC,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC5E,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;;;;;;;;;;;;;IAyBD,cAAc,CACZ,MAAc,EACd,KAAc,EACd,MAAe,EACf,OAAoH,EACpH,OAAgB,EAChB,WAAoB,EACpB,WAAoB,EACpB,YAAqB,EACrB,OAAgB,EAChB,QAAiB,EACjB,UAAmB,EACnB,MAAgD;QAEhD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;SACrE;QAED,MAAM,IAAI,GAAG,iCAAiC,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC3E,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC9B;QAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC9B;QAED,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE;YACtC,OAAO,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;SACtC;QAED,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE;YACtC,OAAO,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;SACtC;QAED,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;YACvC,OAAO,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC;SACxC;QAED,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC9B;QAED,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACnC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;SAChC;QAED,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;YACrC,OAAO,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;SACpC;QAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC5B;QAED,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;;;;;;;;;;;IAaD,WAAW,CAAC,MAAc;QACxB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;SACrE;QAED,MAAM,IAAI,GAAG,8BAA8B,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACxE,MAAM,OAAO,GAAY,EAAE,CAAC;QAE5B,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC;QACzD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,OAAO,GAAG,CAAC;KACZ;;mHAjUU,sBAAsB;uHAAtB,sBAAsB;2FAAtB,sBAAsB;kBADlC,UAAU;;;MCDE,oBAAoB;IAE/B,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;KAEzC;;;;;;;;;;;;;;;;IAkBK,IAAI,CAAC,MAAe,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB;;YAC7E,MAAM,IAAI,GAAG,QAAQ,CAAC;YACtB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAY,KAAK,EAAE,IAAI,EAAE;gBAC7D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;IAeK,MAAM,CAAC,IAAY,EAAE,KAAgB;;YACzC,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,MAAM,IAAI,GAAG,QAAQ,CAAC;YACtB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,MAAM,EAAE,IAAI,EAAE;gBACtD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAYK,GAAG,CAAC,MAAc;;YACtB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,iBAAiB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC3D,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE;gBACrD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;IAaK,MAAM,CAAC,MAAc,EAAE,IAAY;;YACvC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,MAAM,IAAI,iBAAiB,CAAC,oCAAoC,CAAC,CAAC;aACnE;YAED,MAAM,IAAI,GAAG,iBAAiB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC3D,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE;gBACrD,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAYK,MAAM,CAAC,MAAc;;YACzB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,iBAAiB,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC3D,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;IAgBK,cAAc,CAAC,MAAc,EAAE,MAAe,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB;;YACvG,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,6BAA6B,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACvE,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAkB,KAAK,EAAE,IAAI,EAAE;gBACnE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BK,gBAAgB,CAAC,MAAc,EAAE,KAAa,EAAE,KAAe,EAAE,GAAW,EAAE,IAAa;;YAC/F,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,MAAM,IAAI,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;aAClE;YAED,MAAM,IAAI,GAAG,6BAA6B,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACvE,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;aACtB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAa,MAAM,EAAE,IAAI,EAAE;gBAC/D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;IAYK,qBAAqB,CAAC,MAAc,EAAE,YAAoB,EAAE,KAAe;;YAC/E,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,MAAM,IAAI,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;aACpE;YAED,MAAM,IAAI,GAAG,4CAA4C,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;iBAClF,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAa,OAAO,EAAE,IAAI,EAAE;gBAChE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;IAcK,gBAAgB,CAAC,MAAc,EAAE,YAAoB;;YACzD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,MAAM,IAAI,GAAG,4CAA4C,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;iBAClF,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAO,QAAQ,EAAE,IAAI,EAAE;gBAC3D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;;;;;;;;;;;;;;IAgBK,sBAAsB,CAAC,MAAc,EAAE,YAAoB,EAAE,MAAc,EAAE,MAAc;;YAC/F,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,MAAM,IAAI,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;aAC3E;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,MAAM,IAAI,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,GAAG,mDAAmD,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;iBACzF,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAa,OAAO,EAAE,IAAI,EAAE;gBAChE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;SACb;KAAA;;iHA7XU,oBAAoB;qHAApB,oBAAoB;2FAApB,oBAAoB;kBADhC,UAAU;;;MCoBE,qBAAqB;IAChC,OAAO,OAAO,CAAC,OAAwB;QACrC,OAAO;YACL,QAAQ,EAAE,qBAAqB;YAC/B,SAAS,EAAE;gBACT,OAAO,CAAC,uBAAuB,IAAI,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE;gBAChG,EAAE,OAAO,EAAE,qCAAqC,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC,YAAY,EAAE;gBACzF,EAAE,OAAO,EAAE,gCAAgC,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC,QAAQ,EAAE;gBAChF,eAAe;gBACf,sBAAsB;gBACtB,qBAAqB;gBACrB,wBAAwB;gBACxB,wBAAwB;gBACxB,qBAAqB;gBACrB,sBAAsB;gBACtB,oBAAoB;aACrB;SACF,CAAC;KACH;;kHAlBU,qBAAqB;mHAArB,qBAAqB,YAJtB,YAAY,EAAE,gBAAgB;mHAI7B,qBAAqB,aAHrB,EAAE,YADJ,CAAC,YAAY,EAAE,gBAAgB,CAAC;2FAI9B,qBAAqB;kBANjC,QAAQ;mBAAC;oBACR,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;oBACzC,SAAS,EAAE,EAAE;oBACb,OAAO,EAAE,EAAE;iBACZ;;;AC1BD;;;;;;"}