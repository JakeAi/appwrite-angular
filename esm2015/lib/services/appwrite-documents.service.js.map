{"version":3,"file":"appwrite-documents.service.js","sourceRoot":"","sources":["../../../../../../../libs/appwrite/angular/src/lib/services/appwrite-documents.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Document, DocumentBase, DocumentsList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './appwrite.service';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteDocumentsService<T = Document<any>> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Documents\r\n   *\r\n   * Get a list of all the user documents. You can use the query params to\r\n   * filter your results. On admin mode, this endpoint will return a list of all\r\n   * of the project's documents. [Learn more about different API\r\n   * modes](/docs/admin).\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string[]} filters\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderField\r\n   * @param {string} orderType\r\n   * @param {string} orderCast\r\n   * @param {string} search\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async listDocuments<R>(\r\n    collectionId: string,\r\n    filters?: string[],\r\n    limit?: number,\r\n    offset?: number,\r\n    orderField?: keyof (R & DocumentBase) | string,\r\n    orderType?: 'ASC' | 'DESC',\r\n    orderCast?: 'int' | 'string' | 'date' | 'time' | 'datetime',\r\n    search?: string\r\n  ): Promise<DocumentsList<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents'.replace('{collectionId}', collectionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof filters !== 'undefined') {\r\n      payload['filters'] = filters;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderField !== 'undefined') {\r\n      payload['orderField'] = orderField;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    if (typeof orderCast !== 'undefined') {\r\n      payload['orderCast'] = orderCast;\r\n    }\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    return this.appwriteService.call<DocumentsList<R>>(\r\n      'GET',\r\n      path,\r\n      { 'content-type': 'application/json', },\r\n      payload\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create Document\r\n   *\r\n   * Create a new Document. Before using this route, you should create a new\r\n   * collection resource using either a [server\r\n   * integration](/docs/server/database#databaseCreateCollection) API or\r\n   * directly from your database console.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {object} data\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @param {string} parentDocument\r\n   * @param {string} parentProperty\r\n   * @param {string} parentPropertyType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createDocument<R>(collectionId: string, data: R, read?: string[], write?: string[], parentDocument?: string, parentProperty?: string, parentPropertyType?: string): Promise<Document<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof data === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"data\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents'.replace('{collectionId}', collectionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof data !== 'undefined') {\r\n      payload['data'] = data;\r\n    }\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n\r\n    if (typeof parentDocument !== 'undefined') {\r\n      payload['parentDocument'] = parentDocument;\r\n    }\r\n\r\n    if (typeof parentProperty !== 'undefined') {\r\n      payload['parentProperty'] = parentProperty;\r\n    }\r\n\r\n    if (typeof parentPropertyType !== 'undefined') {\r\n      payload['parentPropertyType'] = parentPropertyType;\r\n    }\r\n\r\n    return this.appwriteService.call<Document<R>>('POST', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Document\r\n   *\r\n   * Get a document by its unique ID. This endpoint response returns a JSON\r\n   * object with the document data.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string} documentId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getDocument<R>(collectionId: string, documentId: string): Promise<Document<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof documentId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"documentId\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId)\r\n      .replace('{documentId}', documentId);\r\n    const payload: Payload = {};\r\n\r\n    return this.appwriteService.call<Document<R>>('GET', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update Document\r\n   *\r\n   * Update a document by its unique ID. Using the patch method you can pass\r\n   * only specific fields that will get updated.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string} documentId\r\n   * @param {object} data\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateDocument<R>(collectionId: string, documentId: string, data: any, read?: string[], write?: string[]): Promise<Document<R>> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof documentId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"documentId\"');\r\n    }\r\n\r\n    if (typeof data === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"data\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId)\r\n      .replace('{documentId}', documentId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof data !== 'undefined') {\r\n      payload['data'] = data;\r\n    }\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n    return this.appwriteService.call<Document<R>>('PATCH', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Document\r\n   *\r\n   * Delete a document by its unique ID. This endpoint deletes only the parent\r\n   * documents, its attributes and relations to other documents. Child documents\r\n   * **will not** be deleted.\r\n   *\r\n   * @param {string} collectionId\r\n   * @param {string} documentId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async deleteDocument(collectionId: string, documentId: string): Promise<void> {\r\n    if (typeof collectionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"collectionId\"');\r\n    }\r\n\r\n    if (typeof documentId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"documentId\"');\r\n    }\r\n\r\n    const path = '/database/collections/{collectionId}/documents/{documentId}'.replace('{collectionId}', collectionId)\r\n      .replace('{documentId}', documentId);\r\n    const payload: Payload = {};\r\n\r\n    return this.appwriteService.call<void>('DELETE', path, { 'content-type': 'application/json', }, payload);\r\n\r\n  }\r\n\r\n}\r\n"]}