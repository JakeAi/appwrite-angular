{"version":3,"file":"appwrite-functions.service.js","sourceRoot":"","sources":["../../../../../../../libs/appwrite/angular/src/lib/services/appwrite-functions.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,OAAO,EAAE,eAAe,EAAE,MAAM,IAAI,CAAC;;;AAGrC,MAAM,OAAO,wBAAwB;IAEnC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAE1C,CAAC;IAGD;;;;;;;;;;;;;;;OAeG;IACG,cAAc,CAAC,UAAkB,EAAE,MAAe,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB;;YAC3G,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,MAAM,IAAI,GAAG,oCAAoC,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACtF,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;aAC5B;YAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC;aAClC;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAiB,KAAK,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;QACxH,CAAC;KAAA;IAED;;;;;;;;;;;;OAYG;IACG,eAAe,CAAC,UAAkB,EAAE,IAAa;;YACrD,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,MAAM,IAAI,GAAG,oCAAoC,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACtF,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;gBAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;aACxB;YAED,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,MAAM,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;QAC5G,CAAC;KAAA;IAED;;;;;;;;;OASG;IACG,YAAY,CAAC,UAAkB,EAAE,WAAmB;;YACxD,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,MAAM,IAAI,iBAAiB,CAAC,0CAA0C,CAAC,CAAC;aACzE;YAED,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE;gBACtC,MAAM,IAAI,iBAAiB,CAAC,2CAA2C,CAAC,CAAC;aAC1E;YAED,MAAM,IAAI,GAAG,kDAAkD,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC;iBAChG,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YACzC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAI,KAAK,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,kBAAkB,GAAG,EAAE,OAAO,CAAC,CAAC;QAC3G,CAAC;KAAA;;qHAvGU,wBAAwB;yHAAxB,wBAAwB;2FAAxB,wBAAwB;kBADpC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Execution, ExecutionsList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './';\r\n\r\n@Injectable()\r\nexport class AppwriteFunctionsService<T = Execution> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Executions\r\n   *\r\n   * Get a list of all the current user function execution logs. You can use the\r\n   * query params to filter your results. On admin mode, this endpoint will\r\n   * return a list of all of the project's executions. [Learn more about\r\n   * different API modes](/docs/admin).\r\n   *\r\n   * @param {string} functionId\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async listExecutions(functionId: string, search?: string, limit?: number, offset?: number, orderType?: string): Promise<ExecutionsList> {\r\n    if (typeof functionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"functionId\"');\r\n    }\r\n\r\n    const path = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<ExecutionsList>('GET', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Execution\r\n   *\r\n   * Trigger a function execution. The returned object will return you the\r\n   * current execution status. You can ping the `Get Execution` endpoint to get\r\n   * updates on the current execution status. Once this endpoint is called, your\r\n   * function execution process will start asynchronously.\r\n   *\r\n   * @param {string} functionId\r\n   * @param {string} data\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createExecution(functionId: string, data?: string): Promise<T> {\r\n    if (typeof functionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"functionId\"');\r\n    }\r\n\r\n    const path = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof data !== 'undefined') {\r\n      payload['data'] = data;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Execution\r\n   *\r\n   * Get a function execution log by its unique ID.\r\n   *\r\n   * @param {string} functionId\r\n   * @param {string} executionId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getExecution(functionId: string, executionId: string): Promise<T> {\r\n    if (typeof functionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"functionId\"');\r\n    }\r\n\r\n    if (typeof executionId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"executionId\"');\r\n    }\r\n\r\n    const path = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId)\r\n      .replace('{executionId}', executionId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<T>('GET', path, { 'content-type': 'application/json', }, payload);\r\n  }\r\n\r\n}\r\n"]}