{"version":3,"file":"appwrite-locale.service.js","sourceRoot":"","sources":["../../../../../../../libs/appwrite/angular/src/lib/services/appwrite-locale.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAI3C,OAAO,EAAE,eAAe,EAAE,MAAM,IAAI,CAAC;;;AAIrC,MAAM,OAAO,qBAAqB;IAEhC,YACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAE1C,CAAC;IAGD;;;;;;;;;;;;OAYG;IACG,GAAG;;YACP,MAAM,IAAI,GAAG,SAAS,CAAC;YACvB,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAS,KAAK,EAAE,IAAI,EAAE;gBAC1D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;OAQG;IACG,aAAa;;YACjB,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAClC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAiB,KAAK,EAAE,IAAI,EAAE;gBAClE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;OAQG;IACG,YAAY;;YAChB,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAG5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAgB,KAAK,EAAE,IAAI,EAAE;gBACjE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;IAGD;;;;;;;;OAQG;IACG,cAAc;;YAClB,MAAM,IAAI,GAAG,sBAAsB,CAAC;YACpC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAgB,KAAK,EAAE,IAAI,EAAE;gBACjE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;IAGD;;;;;;;;OAQG;IACG,kBAAkB;;YACtB,MAAM,IAAI,GAAG,0BAA0B,CAAC;YACxC,MAAM,OAAO,GAAY,EAAE,CAAC;YAG5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAa,KAAK,EAAE,IAAI,EAAE;gBAC9D,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;IAGD;;;;;;;;;OASG;IACG,aAAa;;YACjB,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAClC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAiB,KAAK,EAAE,IAAI,EAAE;gBAClE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;IAGD;;;;;;;;OAQG;IACG,YAAY;;YAChB,MAAM,IAAI,GAAG,mBAAmB,CAAC;YACjC,MAAM,OAAO,GAAY,EAAE,CAAC;YAE5B,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAgB,KAAK,EAAE,IAAI,EAAE;gBACjE,cAAc,EAAE,kBAAkB;aACnC,EAAE,OAAO,CAAC,CAAC;QACd,CAAC;KAAA;;kHA/IU,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ContinentsList, Countries, CountriesList, CurrenciesList, LanguagesList, Locale, PhonesList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteLocaleService {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * Get User Locale\r\n   *\r\n   * Get the current user location based on IP. Returns an object with user\r\n   * country code, country name, continent name, continent code, ip address and\r\n   * suggested currency. You can use the locale header to get the data in a\r\n   * supported language.\r\n   *\r\n   * ([IP Geolocation by DB-IP](https://db-ip.com))\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async get(): Promise<Locale> {\r\n    const path = '/locale';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<Locale>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * List Continents\r\n   *\r\n   * List of all continents. You can use the locale header to get the data in a\r\n   * supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getContinents(): Promise<ContinentsList> {\r\n    const path = '/locale/continents';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<ContinentsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * List Countries\r\n   *\r\n   * List of all countries. You can use the locale header to get the data in a\r\n   * supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCountries(): Promise<CountriesList> {\r\n    const path = '/locale/countries';\r\n    const payload: Payload = {};\r\n\r\n\r\n    return await this.appwriteService.call<CountriesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List EU Countries\r\n   *\r\n   * List of all countries that are currently members of the EU. You can use the\r\n   * locale header to get the data in a supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCountriesEU(): Promise<CountriesList> {\r\n    const path = '/locale/countries/eu';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<CountriesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List Countries Phone Codes\r\n   *\r\n   * List of all countries phone codes. You can use the locale header to get the\r\n   * data in a supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCountriesPhones(): Promise<PhonesList> {\r\n    const path = '/locale/countries/phones';\r\n    const payload: Payload = {};\r\n\r\n\r\n    return await this.appwriteService.call<PhonesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List Currencies\r\n   *\r\n   * List of all currencies, including currency symbol, name, plural, and\r\n   * decimal digits for all major and minor currencies. You can use the locale\r\n   * header to get the data in a supported language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getCurrencies(): Promise<CurrenciesList> {\r\n    const path = '/locale/currencies';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<CurrenciesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n\r\n  /**\r\n   * List Languages\r\n   *\r\n   * List of all languages classified by ISO 639-1 including 2-letter code, name\r\n   * in English, and name in the respective language.\r\n   *\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getLanguages(): Promise<LanguagesList> {\r\n    const path = '/locale/languages';\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<LanguagesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n}\r\n"]}