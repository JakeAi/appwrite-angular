{"version":3,"file":"appwrite-avatar.service.js","sourceRoot":"","sources":["../../../../../../../libs/appwrite/angular/src/lib/services/appwrite-avatar.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport URLParse from 'url-parse';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { flatten } from '../util';\r\nimport { AppwriteService } from './';\r\n\r\n@Injectable()\r\nexport class AppwriteAvatarService {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * Get Browser Icon\r\n   *\r\n   * You can use this endpoint to show different browser icons to your users.\r\n   * The code argument receives the browser code as it appears in your user\r\n   * /account/sessions endpoint. Use width, height and quality arguments to\r\n   * change the output settings.\r\n   *\r\n   * @param {string} code\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {number} quality\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getBrowser(code: string, width?: number, height?: number, quality?: number): URLParse {\r\n    if (typeof code === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"code\"');\r\n    }\r\n\r\n    const path = '/avatars/browsers/{code}'.replace('{code}', code);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Credit Card Icon\r\n   *\r\n   * The credit card endpoint will return you the icon of the credit card\r\n   * provider you need. Use width, height and quality arguments to change the\r\n   * output settings.\r\n   *\r\n   * @param {string} code\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {number} quality\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getCreditCard(code: string, width?: number, height?: number, quality?: number): URLParse {\r\n    if (typeof code === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"code\"');\r\n    }\r\n\r\n    const path = '/avatars/credit-cards/{code}'.replace('{code}', code);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Favicon\r\n   *\r\n   * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\r\n   * website URL.\r\n   *\r\n   *\r\n   * @param {string} url\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFavicon(url: string): URLParse {\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/avatars/favicon';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Country Flag\r\n   *\r\n   * You can use this endpoint to show different country flags icons to your\r\n   * users. The code argument receives the 2 letter country code. Use width,\r\n   * height and quality arguments to change the output settings.\r\n   *\r\n   * @param {string} code\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {number} quality\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFlag(code: string, width?: number, height?: number, quality?: number): URLParse {\r\n    if (typeof code === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"code\"');\r\n    }\r\n\r\n    const path = '/avatars/flags/{code}'.replace('{code}', code);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get Image from URL\r\n   *\r\n   * Use this endpoint to fetch a remote image URL and crop it to any image size\r\n   * you want. This endpoint is very useful if you need to crop and display\r\n   * remote images in your app or in case you want to make sure a 3rd party\r\n   * image is properly served using a TLS protocol.\r\n   *\r\n   * @param {string} url\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getImage(url: string, width?: number, height?: number): URLParse {\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/avatars/image';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get User Initials\r\n   *\r\n   * Use this endpoint to show your user initials avatar icon on your website or\r\n   * app. By default, this route will try to print your logged-in user name or\r\n   * email initials. You can also overwrite the user name if you pass the 'name'\r\n   * parameter. If no name is given and no user is logged, an empty avatar will\r\n   * be returned.\r\n   *\r\n   * You can use the color and background params to change the avatar colors. By\r\n   * default, a random theme will be selected. The random theme will persist for\r\n   * the user's initials when reloading the same theme will always return for\r\n   * the same initials.\r\n   *\r\n   * @param {string} name\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string} color\r\n   * @param {string} background\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getInitials(name?: string, width?: number, height?: number, color?: string, background?: string): URLParse {\r\n    const path = '/avatars/initials';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof color !== 'undefined') {\r\n      payload['color'] = color;\r\n    }\r\n\r\n    if (typeof background !== 'undefined') {\r\n      payload['background'] = background;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get QR Code\r\n   *\r\n   * Converts a given plain text to a QR code image. You can use the query\r\n   * parameters to change the size and style of the resulting image.\r\n   *\r\n   * @param {string} text\r\n   * @param {number} size\r\n   * @param {number} margin\r\n   * @param {boolean} download\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getQR(text: string, size?: number, margin?: number, download?: boolean): URLParse {\r\n    if (typeof text === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"text\"');\r\n    }\r\n\r\n    const path = '/avatars/qr';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof text !== 'undefined') {\r\n      payload['text'] = text;\r\n    }\r\n\r\n    if (typeof size !== 'undefined') {\r\n      payload['size'] = size;\r\n    }\r\n\r\n    if (typeof margin !== 'undefined') {\r\n      payload['margin'] = margin;\r\n    }\r\n\r\n    if (typeof download !== 'undefined') {\r\n      payload['download'] = download;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n}\r\n"]}