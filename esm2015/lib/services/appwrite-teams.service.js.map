{"version":3,"file":"appwrite-teams.service.js","sourceRoot":"","sources":["../../../../../../../libs/appwrite/angular/src/lib/services/appwrite-teams.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Membership, MembershipsList, Team, TeamsList } from '@appwrite/common';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteTeamsService<T = Team> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Teams\r\n   *\r\n   * Get a list of all the current user teams. You can use the query params to\r\n   * filter your results. On admin mode, this endpoint will return a list of all\r\n   * of the project's teams. [Learn more about different API\r\n   * modes](/docs/admin).\r\n   *\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async list(search?: string, limit?: number, offset?: number, orderType?: string): Promise<TeamsList> {\r\n    const path = '/teams';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<TeamsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Team\r\n   *\r\n   * Create a new team. The user who creates the team will automatically be\r\n   * assigned as the owner of the team. The team owner can invite new members,\r\n   * who will be able add new owners and update or delete the team from your\r\n   * project.\r\n   *\r\n   * @param {string} name\r\n   * @param {string[]} roles\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async create(name: string, roles?: string[]): Promise<T> {\r\n    if (typeof name === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"name\"');\r\n    }\r\n\r\n    const path = '/teams';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    if (typeof roles !== 'undefined') {\r\n      payload['roles'] = roles;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Team\r\n   *\r\n   * Get a team by its unique ID. All team members have read access for this\r\n   * resource.\r\n   *\r\n   * @param {string} teamId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async get(teamId: string): Promise<T> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<T>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Team\r\n   *\r\n   * Update a team by its unique ID. Only team owners have write access for this\r\n   * resource.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} name\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async update(teamId: string, name: string): Promise<T> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof name === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"name\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('PUT', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Team\r\n   *\r\n   * Delete a team by its unique ID. Only team owners have write access for this\r\n   * resource.\r\n   *\r\n   * @param {string} teamId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async delete(teamId: string): Promise<void> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get Team Memberships\r\n   *\r\n   * Get a team members by the team unique ID. All team members have read access\r\n   * for this list of resources.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getMemberships(teamId: string, search?: string, limit?: number, offset?: number, orderType?: string): Promise<MembershipsList> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<MembershipsList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create Team Membership\r\n   *\r\n   * Use this endpoint to invite a new member to join your team. An email with a\r\n   * link to join the team will be sent to the new member email address if the\r\n   * member doesn't exist in the project it will be created automatically.\r\n   *\r\n   * Use the 'URL' parameter to redirect the user from the invitation email back\r\n   * to your app. When the user is redirected, use the [Update Team Membership\r\n   * Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow\r\n   * the user to accept the invitation to the team.\r\n   *\r\n   * Please note that in order to avoid a [Redirect\r\n   * Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\r\n   * the only valid redirect URL's are the once from domains you have set when\r\n   * added your platforms in the console interface.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} email\r\n   * @param {string[]} roles\r\n   * @param {string} url\r\n   * @param {string} name\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createMembership(teamId: string, email: string, roles: string[], url: string, name?: string): Promise<Membership> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof email === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"email\"');\r\n    }\r\n\r\n    if (typeof roles === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"roles\"');\r\n    }\r\n\r\n    if (typeof url === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"url\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof email !== 'undefined') {\r\n      payload['email'] = email;\r\n    }\r\n\r\n    if (typeof name !== 'undefined') {\r\n      payload['name'] = name;\r\n    }\r\n\r\n    if (typeof roles !== 'undefined') {\r\n      payload['roles'] = roles;\r\n    }\r\n\r\n    if (typeof url !== 'undefined') {\r\n      payload['url'] = url;\r\n    }\r\n\r\n    return await this.appwriteService.call<Membership>('POST', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Membership Roles\r\n   *\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} membershipId\r\n   * @param {string[]} roles\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateMembershipRoles(teamId: string, membershipId: string, roles: string[]): Promise<Membership> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof membershipId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"membershipId\"');\r\n    }\r\n\r\n    if (typeof roles === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"roles\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId)\r\n      .replace('{membershipId}', membershipId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof roles !== 'undefined') {\r\n      payload['roles'] = roles;\r\n    }\r\n\r\n    return await this.appwriteService.call<Membership>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete Team Membership\r\n   *\r\n   * This endpoint allows a user to leave a team or for a team owner to delete\r\n   * the membership of any other team member. You can also use this endpoint to\r\n   * delete a user membership even if it is not accepted.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} membershipId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async deleteMembership(teamId: string, membershipId: string): Promise<void> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof membershipId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"membershipId\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId)\r\n      .replace('{membershipId}', membershipId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update Team Membership Status\r\n   *\r\n   * Use this endpoint to allow a user to accept an invitation to join a team\r\n   * after being redirected back to your app from the invitation email recieved\r\n   * by the user.\r\n   *\r\n   * @param {string} teamId\r\n   * @param {string} membershipId\r\n   * @param {string} userId\r\n   * @param {string} secret\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async updateMembershipStatus(teamId: string, membershipId: string, userId: string, secret: string): Promise<Membership> {\r\n    if (typeof teamId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"teamId\"');\r\n    }\r\n\r\n    if (typeof membershipId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"membershipId\"');\r\n    }\r\n\r\n    if (typeof userId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"userId\"');\r\n    }\r\n\r\n    if (typeof secret === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"secret\"');\r\n    }\r\n\r\n    const path = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId)\r\n      .replace('{membershipId}', membershipId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof userId !== 'undefined') {\r\n      payload['userId'] = userId;\r\n    }\r\n\r\n    if (typeof secret !== 'undefined') {\r\n      payload['secret'] = secret;\r\n    }\r\n\r\n    return await this.appwriteService.call<Membership>('PATCH', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n}\r\n"]}