{"version":3,"file":"appwrite-storage.service.js","sourceRoot":"","sources":["../../../../../../../libs/appwrite/angular/src/lib/services/appwrite-storage.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { File as AppwriteFile, FilesList } from '@appwrite/common';\r\nimport URLParse from 'url-parse';\r\nimport { AppwriteException } from '../exceptions';\r\nimport { Payload } from '../types';\r\nimport { flatten } from '../util';\r\nimport { AppwriteService } from './';\r\n\r\n\r\n@Injectable()\r\nexport class AppwriteStorageService<T = AppwriteFile> {\r\n\r\n  constructor(\r\n    private appwriteService: AppwriteService,\r\n  ) {\r\n  }\r\n\r\n\r\n  /**\r\n   * List Files\r\n   *\r\n   * Get a list of all the user files. You can use the query params to filter\r\n   * your results. On admin mode, this endpoint will return a list of all of the\r\n   * project's files. [Learn more about different API modes](/docs/admin).\r\n   *\r\n   * @param {string} search\r\n   * @param {number} limit\r\n   * @param {number} offset\r\n   * @param {string} orderType\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async listFiles(search?: string, limit?: number, offset?: number, orderType?: string): Promise<FilesList> {\r\n    const path = '/storage/files';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof search !== 'undefined') {\r\n      payload['search'] = search;\r\n    }\r\n\r\n    if (typeof limit !== 'undefined') {\r\n      payload['limit'] = limit;\r\n    }\r\n\r\n    if (typeof offset !== 'undefined') {\r\n      payload['offset'] = offset;\r\n    }\r\n\r\n    if (typeof orderType !== 'undefined') {\r\n      payload['orderType'] = orderType;\r\n    }\r\n\r\n    return await this.appwriteService.call<FilesList>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Create File\r\n   *\r\n   * Create a new file. The user who creates the file will automatically be\r\n   * assigned to read and write access unless he has passed custom values for\r\n   * read and write arguments.\r\n   *\r\n   * @param {File} file\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async createFile(file: File, read?: string[], write?: string[]): Promise<T> {\r\n    if (typeof file === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"file\"');\r\n    }\r\n\r\n    const path = '/storage/files';\r\n    const payload: Payload = {};\r\n\r\n    if (typeof file !== 'undefined') {\r\n      payload['file'] = file;\r\n    }\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n\r\n    return await this.appwriteService.call<T>('POST', path, {\r\n      'content-type': 'multipart/form-data',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get File\r\n   *\r\n   * Get a file by its unique ID. This endpoint response returns a JSON object\r\n   * with the file metadata.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n  async getFile(fileId: string): Promise<T> {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<T>('GET', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Update File\r\n   *\r\n   * Update a file by its unique ID. Only users with write permissions have\r\n   * access to update this resource.\r\n   *\r\n   * @param {string} fileId\r\n   * @param {string[]} read\r\n   * @param {string[]} write\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n\r\n\r\n  async updateFile(fileId: string, read: string[], write: string[]): Promise<T> {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    if (typeof read === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"read\"');\r\n    }\r\n\r\n    if (typeof write === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"write\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof read !== 'undefined') {\r\n      payload['read'] = read;\r\n    }\r\n\r\n    if (typeof write !== 'undefined') {\r\n      payload['write'] = write;\r\n    }\r\n\r\n\r\n    return await this.appwriteService.call<T>('PUT', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Delete File\r\n   *\r\n   * Delete a file by its unique ID. Only users with write permissions have\r\n   * access to delete this resource.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {Promise}\r\n   */\r\n\r\n  async deleteFile(fileId: string): Promise<void> {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    return await this.appwriteService.call<void>('DELETE', path, {\r\n      'content-type': 'application/json',\r\n    }, payload);\r\n  }\r\n\r\n  /**\r\n   * Get File for Download\r\n   *\r\n   * Get a file content by its unique ID. The endpoint response return with a\r\n   * 'Content-Disposition: attachment' header that tells the browser to start\r\n   * downloading the file to user downloads directory.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFileDownload(fileId: string): URLParse {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}/download'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get File Preview\r\n   *\r\n   * Get a file preview image. Currently, this method supports preview for image\r\n   * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\r\n   * and spreadsheets, will return the file icon image. You can also pass query\r\n   * string arguments for cutting and resizing your preview image.\r\n   *\r\n   * @param {string} fileId\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string} gravity\r\n   * @param {number} quality\r\n   * @param {number} borderWidth\r\n   * @param {string} borderColor\r\n   * @param {number} borderRadius\r\n   * @param {number} opacity\r\n   * @param {number} rotation\r\n   * @param {string} background\r\n   * @param {string} output\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFilePreview(\r\n    fileId: string,\r\n    width?: number,\r\n    height?: number,\r\n    gravity?: 'center' | 'top-left' | 'top' | 'top-right' | 'left' | 'right' | 'bottom-left' | 'bottom' | 'bottom-right',\r\n    quality?: number,\r\n    borderWidth?: number,\r\n    borderColor?: string,\r\n    borderRadius?: number,\r\n    opacity?: number,\r\n    rotation?: number,\r\n    background?: string,\r\n    output?: 'jpeg' | 'jpg' | 'png' | 'gif' | 'webp'\r\n  ): URLParse {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}/preview'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    if (typeof width !== 'undefined') {\r\n      payload['width'] = width;\r\n    }\r\n\r\n    if (typeof height !== 'undefined') {\r\n      payload['height'] = height;\r\n    }\r\n\r\n    if (typeof gravity !== 'undefined') {\r\n      payload['gravity'] = gravity;\r\n    }\r\n\r\n    if (typeof quality !== 'undefined') {\r\n      payload['quality'] = quality;\r\n    }\r\n\r\n    if (typeof borderWidth !== 'undefined') {\r\n      payload['borderWidth'] = borderWidth;\r\n    }\r\n\r\n    if (typeof borderColor !== 'undefined') {\r\n      payload['borderColor'] = borderColor;\r\n    }\r\n\r\n    if (typeof borderRadius !== 'undefined') {\r\n      payload['borderRadius'] = borderRadius;\r\n    }\r\n\r\n    if (typeof opacity !== 'undefined') {\r\n      payload['opacity'] = opacity;\r\n    }\r\n\r\n    if (typeof rotation !== 'undefined') {\r\n      payload['rotation'] = rotation;\r\n    }\r\n\r\n    if (typeof background !== 'undefined') {\r\n      payload['background'] = background;\r\n    }\r\n\r\n    if (typeof output !== 'undefined') {\r\n      payload['output'] = output;\r\n    }\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n\r\n  /**\r\n   * Get File for View\r\n   *\r\n   * Get a file content by its unique ID. This endpoint is similar to the\r\n   * download method but returns with no  'Content-Disposition: attachment'\r\n   * header.\r\n   *\r\n   * @param {string} fileId\r\n   * @throws {AppwriteException}\r\n   * @returns {URLParse}\r\n   */\r\n  getFileView(fileId: string): URLParse {\r\n    if (typeof fileId === 'undefined') {\r\n      throw new AppwriteException('Missing required parameter: \"fileId\"');\r\n    }\r\n\r\n    const path = '/storage/files/{fileId}/view'.replace('{fileId}', fileId);\r\n    const payload: Payload = {};\r\n\r\n    const uri = new URLParse(this.appwriteService.config.endpoint + path);\r\n    payload['project'] = this.appwriteService.config.project;\r\n    uri.set('query', flatten(payload));\r\n\r\n    return uri;\r\n  }\r\n}\r\n"]}